import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.yellow900,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(9.h),
          ),
          shadowColor: appTheme.black90001.withOpacity(0.25),
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.yellow900,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black90001.withOpacity(0.31),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray5001,
          fontSize: 18.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 12.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.blueGray800,
          fontSize: 58.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 41.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 36.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 32.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 25.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray900.withOpacity(0.65),
          fontSize: 11.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray90002,
          fontSize: 20.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w300,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 16.fSize,
          fontFamily: 'K2D',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFF2C94C);

  // Black
  Color get black900 => Color(0XFF020E12);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF2F80ED);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFD0D0D0);
  Color get blueGray300 => Color(0XFFA1A1BC);
  Color get blueGray50 => Color(0XFFE6EBED);
  Color get blueGray500 => Color(0XFF667E87);
  Color get blueGray5001 => Color(0XFFF1F1F1);
  Color get blueGray700 => Color(0XFF376272);
  Color get blueGray800 => Color(0XFF385059);
  Color get blueGray900 => Color(0XFF1F3A44);
  Color get blueGray90001 => Color(0XFF292D32);
  Color get blueGray90002 => Color(0XFF162A31);
  Color get blueGray90090 => Color(0X90333333);

  // Cyan
  Color get cyan900 => Color(0XFF03676E);
  Color get cyan90001 => Color(0XFF03676D);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEAEAEA);
  Color get gray400 => Color(0XFFB2B2B2);
  Color get gray40001 => Color(0XFFC9C9C9);
  Color get gray50 => Color(0XFFFFFCF2);
  Color get gray500 => Color(0XFFADADAD);
  Color get gray50001 => Color(0XFF9E9E9E);
  Color get gray700 => Color(0XFF6A6A6A);
  Color get gray800 => Color(0XFF4B4B4B);
  Color get gray80001 => Color(0XFF434343);
  Color get gray900 => Color(0XFF151515);

  // Green
  Color get green500 => Color(0XFF4CB944);
  Color get greenA700 => Color(0XFF1BB260);

  // LightGreen
  Color get lightGreen500 => Color(0XFF6DF24C);

  // Lime
  Color get lime700 => Color(0XFFC49F00);

  // Orange
  Color get orange100 => Color(0XFFFFD7B2);
  Color get orange200 => Color(0XFFFFC897);

  // Red
  Color get red900 => Color(0XFF9B0000);

  // White
  Color get whiteA700 => Color(0XFFFFFEFD);
  Color get whiteA70001 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow900 => Color(0XFFFB8B25);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
